import Alphanumeric from '@root/constants/alphanumeric'

import getRandomNumber from './get-random-number'

/**
 * The class that handles, isomorphic, by generating a random UUID (Universally Unique Identifier) with a fixed length
 * that is specified by the given length - that defaults to `32`.
 */
export default class UUID {
  /**
   * The default length of a random UUID (Universally Unique Identifier) that is generated by the system.
   */
  private static readonly DEFAULT_LENGTH = 32 as const
  /**
   * The range of characters that are used to generate a random UUID (Universally Unique Identifier). This is a
   * constant that is defined in {@link Alphanumeric} - a string that contains all alphanumeric characters, i.e. all
   * numbers (0-9) and upper- (A-Z) and lower-cased (a-z) letters.
   */
  private static readonly CHARACTERS_RANGE = Alphanumeric

  /**
   * (Internal) function to get an alphanumeric character from the {@link CHARACTERS_RANGE | alphanumeric range},
   * indexed by a {@link getRandomNumber | random number}.
   *
   * @see {@link Alphanumeric}
   * @see {@link CHARACTERS_RANGE}
   * @see {@link getRandomNumber}
   */
  private randomCharacter(): string {
    const randomIndex = getRandomNumber(UUID.CHARACTERS_RANGE.length)
    return UUID.CHARACTERS_RANGE.charAt(randomIndex)
  }

  private constructor() {}

  /**
   * (Internal) function to get an array of numbers with a fixed length that is specified by the {@link length | length
   * parameter}.
   */
  private getFixedLengthArray(length: number): number[] {
    return Array.from(Array(length).keys())
  }

  /**
   * The function that generates a random UUID (Universally Unique Identifier) with a fixed length that is specified by
   * the {@link length | length parameter}.
   *
   * @see {@link DEFAULT_LENGTH}
   * @see {@link CHARACTERS_RANGE}
   * @see {@link randomCharacter}
   * @see {@link getFixedLengthArray}
   * @see {@link getRandomNumber}
   * @see {@link generateRandomUUID}
   *
   * @see https://en.wikipedia.org/wiki/Universally_unique_identifier
   */
  protected generateRandomUUID(length: number): string {
    const fixedLengthArray = this.getFixedLengthArray(length)
    const randomCharacters = fixedLengthArray.map(this.randomCharacter)
    return randomCharacters.join('')
  }

  /**
   * The function that generates a random UUID (Universally Unique Identifier) with a fixed length that is specified by
   * the {@link length | length parameter}.
   */
  static random(length = UUID.DEFAULT_LENGTH): string {
    return new UUID().generateRandomUUID(length)
  }
}
