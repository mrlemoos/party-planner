// NOTE: This file is autogenerated by the Supabase CLI by running:
// npx supabase gen types typescript --project-id {{PROJECT_ID}} --schema public > src/supabase.d.ts
// To find the {{PROJECT_ID}}, you just take a look at the URL of your Supabase project which is something like:
// https://my-amazing-app.supabase.co
// ðŸ‘† Given the URL above, then your {{PROJECT_ID}} will be "my-amazing-app".

export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      parties: {
        Row: {
          created_at: string
          id: string
          party_name: string
        }
        Insert: {
          created_at?: string
          id?: string
          party_name: string
        }
        Update: {
          created_at?: string
          id?: string
          party_name?: string
        }
        Relationships: []
      }
      party_board_ticket_votes: {
        Row: {
          board_id: string
          created_at: string
          id: string
          member_id: string
          vote: string | null
        }
        Insert: {
          board_id: string
          created_at?: string
          id?: string
          member_id: string
          vote?: string | null
        }
        Update: {
          board_id?: string
          created_at?: string
          id?: string
          member_id?: string
          vote?: string | null
        }
        Relationships: []
      }
      party_board_tickets: {
        Row: {
          board_id: string
          created_at: string
          id: number
          ticket_description: string | null
          ticket_id: string
          ticket_summary: string
        }
        Insert: {
          board_id: string
          created_at?: string
          id?: number
          ticket_description?: string | null
          ticket_id: string
          ticket_summary: string
        }
        Update: {
          board_id?: string
          created_at?: string
          id?: number
          ticket_description?: string | null
          ticket_id?: string
          ticket_summary?: string
        }
        Relationships: []
      }
      party_boards: {
        Row: {
          board_name: string
          created_at: string
          focused_ticket_id: string | null
          id: string
          party_id: string
        }
        Insert: {
          board_name: string
          created_at?: string
          focused_ticket_id?: string | null
          id?: string
          party_id: string
        }
        Update: {
          board_name?: string
          created_at?: string
          focused_ticket_id?: string | null
          id?: string
          party_id?: string
        }
        Relationships: []
      }
      party_members: {
        Row: {
          created_at: string
          id: string
          network_status: string
          party_id: string
          user_display_name: string
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          network_status?: string
          party_id: string
          user_display_name: string
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          network_status?: string
          party_id?: string
          user_display_name?: string
          user_id?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database['public']['Tables'] & Database['public']['Views'])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions['schema']]['Tables'] &
        Database[PublicTableNameOrOptions['schema']]['Views'])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions['schema']]['Tables'] &
      Database[PublicTableNameOrOptions['schema']]['Views'])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (Database['public']['Tables'] & Database['public']['Views'])
    ? (Database['public']['Tables'] & Database['public']['Views'])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends keyof Database['public']['Tables'] | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions['schema']]['Tables']
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof Database['public']['Tables']
    ? Database['public']['Tables'][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends keyof Database['public']['Tables'] | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions['schema']]['Tables']
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof Database['public']['Tables']
    ? Database['public']['Tables'][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends keyof Database['public']['Enums'] | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions['schema']]['Enums']
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions['schema']]['Enums'][EnumName]
  : PublicEnumNameOrOptions extends keyof Database['public']['Enums']
    ? Database['public']['Enums'][PublicEnumNameOrOptions]
    : never
